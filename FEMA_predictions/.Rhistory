library(ISLR)
install.packages("ISLR")
library(ISLR)
attach(Wage)
fit = lm(wage~poly(age,4),data=Wage)
coef(summary(fit))
fit2 = lm(wage~poly(age,4,raw=T))
fit2a = lm(wage~age+I(age^2)+I(age^3)+I(age^4),data=Wage)
agelims=range(age)
age.grid=seq(from=agelims[1],to=agelims[2])
preds=predict(fit,newdata=list(age=age.grid),se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
par(mfrow=c(1,2),mar=c(4.5,4.5,1,1),oma=c(0,0,4,0))
plot(age,wage,xlim=agelims, cex=.5,col="darkgrey")
plot(age,wage,xlim=agelims, cex=.5,col="darkgrey")
lines(age .grid ,preds$fit ,lwd =2, col =" blue")
lines(age.grid ,preds$fit ,lwd =2, col ="blue")
matlines (age.grid ,se.bands ,lwd =1, col ="blue",lty =3)
fit=glm(I(wage>250)~poly(age,4),data=Wage,family=binomial)
fit=glm(I(wage>250)~poly(age,4),data=Wage,family=binomial)
preds=predict(fit,newdata=list(age=age.grid),se=T)
#extra steps for calculating confidence interval with logistic regression
pfit=exp(preds$fit)/(1+exp(preds$fit))
se.bands.logit = cbind(preds$fit+2*preds$se.fit,
preds$fit-2*preds$se.fit)
se.bands = exp(se.bands.logit)/(1+exp(se.bands.logit))
#plot
plot(age,I(wage>250),xlim=agelims,type="n",ylim=c(0,.2))
points(jitter(age), I((wage>250)/5),cex=.5,pch="|",
col="darkgrey")
lines(age.grid,pfit,lwd=2,col="blue")
matlines(age.grid,se.bands,lwd=1,col="blue",lty=3)
library(splines)
fit=lm(wage~bs(age,knots=c(25,40,60)),data=Wage)
pred=predict(fit,newdata=list(age=age.grid),se=T)
plot(age,wage,col="gray")
lines(age.grid,pred$fit,lwd=2)
lines(age.grid,pred$fit+2*pred$se,lty="dashed")
lines(age.grid,pred$fit-2*pred$se,lty="dashed")
fit2=lim(wage~ns(age,df=4),data=Wage)
pred2=predict(fit2,newdata=list(age=age.grid),se=T)
lines(age.grid, pred2$fit,col="red",lwd=2)
plot(age,wage,xlim=agelims, cex=.5,col="darkgrey")
title("Smoothing Spline")
fit=smooth.spline(age,wage,df=16)
fit2=smooth.spline(age,wage,cv=TRUE)
fit2$df
#[1] 6.8
lines(fit,col="red",lwd=2)
lines(fit2,col="blue",lwd=2)
legend("topright",legend=c("16 DF", "6.8 DF"),
col=c("red","blue"),lty=1,lwd=2,cex=.8)
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
title("Local Regression")
fit=loess(wage~age,span=.2,data=Wage)
fit2=loess(wage~age,span=.5,data=Wage)
lines(age.grid,predict(fit,data.frame(age=age.grid)),
col="red",lwd=2)
lines(age.grid,predict(fit2,data.frame(age=age.grid)),
col="blue",lwd=2)
legend("topright",legend=c("Span=0.2","Span=0.5"),
col=c("red","blue"),lty=1,lwd=2,cex=.8)
fit=lm(wage~bs(age,knots=c(25,40,60)),data=Wage)
library(gam)
install.packages(gam)
install.packages("gam")
library(gam)
gam1=lm(wage~ns(year,4)+ns(age,5)+education,data=Wage)
gam.m3=gam(wage~s(year,4)+s(age,5)+education,data=Wage)
par(mfrow=c(1,3))
plot(gam.m3,.se=TRUE,col="blue")
gam.lo=gam(wage~s(year,df=4)+lo(age,span=0.7)+education,
data=Wage)
plot.gam(gam.lo, se=TRUE, col="green")
install.packages("akima")
library(akima)
gam.lo.i=gam(wage~lo(year,age,span=0.5)+education,
data=Wage)
plot(gam.lo.i)
gam.lr=gam(I(wage>250)~year+s(age,df=5)+education,
family=binomial,data=Wage)
par(mfrow=c(1,3))
plot(gam.lr,se=T,col="green")
gam.lr.s=gam(I(wage>250)~year+s(age,df=5)+education,
family=binomial,data=Wage,subset=(education !="1. < HS Grad"))
plot(gam.lr.s,se=T,col="green")
library(ISLR)
attach(Wage)
#################################################################
# P O L Y N O M I A L   R E G R E S S I O N   &   S T E P   FUN#
#################################################################
fit =lm(wage~poly(age,4),data=Wage)
coef(summary(fit))
#^^^this syntax fits a linear model, using lm() function, in
# order to predict wage using a fourth-degree polynomial.
#The function returns a matrix whose columns are a basis of
# orthogonal polynomials, which means that each column is a linear
# combination of the variables age, age^2, age^3, and age^4
#However, we can also use poly() to obtain age, age^2, age^3, age^4
# directly:
fit2 = lm(wage~poly(age,4,raw=T),data=Wage)
coef(summary(fit2))
#also same:
fit2a = lm(wage~age+I(age^2)+I(age^3)+I(age^4),data=Wage)
coef(fit2a)
fit2b = lm(wage~cbind(age,age^2,age^3,age^4),data=Wage)
#create a grid of values for age at which we want predictions,
# and call generic predict function, specifying that we want
# standard errors as well
agelims=range(age)
age.grid=seq(from=agelims[1],to=agelims[2])
preds=predict(fit,newdata=list(age=age.grid),se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
#plot that motha
par(mfrow=c(1,2),mar=c(4.5,4.5,1,1),oma=c(0,0,4,0))
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
title("Degree -4 Polynomial",outer=T)
lines(age.grid,preds$fit,lwd=2,col="blue")
matlines(age.grid,se.bands,lwd=1,col="blue",lty=3)
attach(College)
test_sample <- sample(nrow(College),size=length(College)/2)
train = College[-test_sample,]
test = College[test_sample,]
train_sample <- sample(nrow(College,size=500))
train_sample <- sample(nrow(College),size=500)
train = College[train_sample,]
dim(College)
test = College[-train_sample,]
regfit.fwd=regsubsets(Outstate~.,data=College,method="forward")
library(ISLR)
regfit.fwd=regsubsets(Outstate~.,data=College,method="forward")
regfit.fwd=regsubsets(Outstate~.,data=College,method="forward")
library(leaps)
install.packages("leaps")
library(leaps)
regfit.fwd=regsubsets(Outstate~.,data=College,method="forward")
summary(regfit.fwd)
plot(regfit.fwd)
regfit.fwd=regsubsets(Outstate~.,data=train,method="forward")
plot(regfit.fwd)
regfit.fwd=regsubsets(Outstate~.,data=train,nvmax=17,method="forward")
plot(regfit.fwd)
names(College)
which.min(summar(reg.fwd)$bic)
which.min(summary(reg.fwd)$bic)
which.min(summary(regfit.fwd)$bic)
which.max(summary(regfit.fwd)$adjr2)
which.min(summary(regfit.fwd)$aic)
plot(regfit.fwd,scale="adjr2")
plot(regfit.fwd,scale="cp")
plot(regfit.fwd,scale="Cp")
which.max(summary(regfit.fwd)$Cp)
which.max(summary(regfit.fwd)$cp)
which.min(summary(regfit.fwd)$cp)
coef(regfit.fwd,13)
coef(regfit.fwd,12)
library(gam)
names(College)
gam.test=gam(Outstate~s(Private,4)+s(Apps,5),data=College)
gam.test=lm(Outstate~ns(Private,4)+ns(Apps,5),data=College)
names(College)
head(College,3)
gam.test=lm(Outstate~ns(PrivateYes,4)+ns(Apps,5),data=College)
College$PrivateYes <- College[(Private=="Yes"),]
College$PrivateYes <- College$Private ="Yes"
College$PrivateYes <- College$Private =="Yes"
College$PrivateYes[1]
gam.test=lm(Outstate~ns(PrivateYes,4)+ns(Apps,5),data=College)
gam.test=gam(Outstate~s(PrivateYes,4)+s(Apps,5),data=College)
gam.test=gam(Outstate~s(PrivateYes,2)+s(Apps,5),data=College)
gam.test=gam(Outstate~PrivateYes+s(Apps,5),data=College)
gam.test=gam(Outstate~PrivateYes+s(Apps,5)+s(Accept,5)+s(Top10perc,5)+s(F.Undergrad,5)+s(Room.Board,5)+s(PhD,5)+s(Terminal,5)+s(S.F.Ratio,5)+s(perc.alumni,5)+s(Expend,5)+s(Grad.Rage,5),data=College)
gam.test=gam(Outstate~PrivateYes+s(Apps,5)+s(Accept,5)+s(Top10perc,5)+s(F.Undergrad,5)+s(Room.Board,5)+s(PhD,5)+s(Terminal,5)+s(S.F.Ratio,5)+s(perc.alumni,5)+s(Expend,5)+s(Grad.Rate,5),data=College)
summary(gam.test)
gam.test=gam(Outstate~PrivateYes+s(Apps,5)+s(Accept,5)+s(Top10perc,5)+s(F.Undergrad,5)+s(Room.Board,5)+s(PhD,5)+s(Terminal,5)+s(S.F.Ratio,5)+s(perc.alumni,5)+s(Expend,5)+s(Grad.Rate,5),data=train)
set.seed(123)
train_sample <- sample(nrow(College),size=500)
train = College[train_sample,]
test = College[-train_sample,]
gam.test=gam(Outstate~PrivateYes+s(Apps,5)+s(Accept,5)+s(Top10perc,5)+s(F.Undergrad,5)+s(Room.Board,5)+s(PhD,5)+s(Terminal,5)+s(S.F.Ratio,5)+s(perc.alumni,5)+s(Expend,5)+s(Grad.Rate,5),data=train)
preds=predict(gam.test,newdata=test)
table(preds)
mean((preds - test$Outstate)^2)
linear = lm(Outstate~PrivateYes+Apps+Accept+Top10perc+F.Undergrad+Room.Board+PhD+Terminal+S.F.Ratio+perc.alumni+Expend+Grad.Rate)
linear = lm(Outstate~PrivateYes+Apps+Accept+Top10perc+F.Undergrad+Room.Board+PhD+Terminal+S.F.Ratio+perc.alumni+Expend+Grad.Rate,data=train)
pred.linear = predict(linear,data=test)
mean((pred.linear - test$Outstate)^2)
setwd("/Users/alleneverett/Documents/cmsc478/final_submit")
source("preprocess.r")
library(e1071)
source("isolating_data.r")
declaration.freq
